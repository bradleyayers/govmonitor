# coding=utf-8
"""Deployment tasks.

To use this fabfile, you must first configure several ``env`` settings:
``env.host``, ``env.user``, etc. Constraints apply to these settings:

* ``env.user`` on the host must be the owner of the site's files and it must
  permit SSH connections (``authorized_keys`` or similar must be configured).
* ``env.user`` on the host must have permission to reload Apache and write to
  its ``sites-{available,enabled}`` directories (``sudo`` must be configured).

Several assumptions are made about both the host and repository layout:

* Apache's ``sites-{available,enabled}`` directories must be located in
  ``/etc/apache2``. This is the default if Apache is installed with aptitude.
* The site's configuration files in said directories must be named after the
  site's root directory (i.e. the basename of ``env.root_path``).
* If it's being used, Solr's home directory must be ``/etc/opt/solr``, it must
  be running on port ``8983``, and the core administration interface must be
  accessible at ``http://localhost:8983/solr/admin/cores`` (no trailing slash).
"""
from fabric.api import *
from fabric.colors import green, red, yellow
from fabric.contrib.console import confirm
from fabric.contrib.files import exists
import os.path
import sys


# The host we're deploying to and the credentials that are to be used for SSH
# and sudo prompts. Do not include a username in ``env.host`` (e.g. user@host).
env.host = "HOST"
env.user = "USER"
env.password = "PASSWORD"

# The path to the site's root directory. Do not include a tailing slash.
env.root_path = "ROOT_PATH"

# The paths of files or directories that must be preserved across deployments,
# relative to the repository's root. Prints a message if a file doesn't exist.
env.preserved_files = (
    "deployment/conf/apache/apache.conf",
    "deployment/conf/apache/apache.conf.maintenance",
)

# The name of the site's root python module.
env.root_module_name = "ROOT_MODULE_NAME"

# The name of the site's Solr core or None if the host isn't running Solr.
env.solr_core_name = "SOLR_CORE_NAME"

# The prefix common to all the site's upstart jobs: celerycam, celeryd,
# memcached, etc. For example, "site-celerycam" if this is set to "site-".
env.upstart_jobs_prefix = "UPSTART_JOBS_PREFIX"


@task
def access_log(lines=100):
    """Retrieve recent lines from the Apache access log.

    :param lines: The number of lines to retrieve.
    :type  lines: ``int``
    """
    print run("tail -n %d \"%s/access.log\"" % (lines, env.root_path))


@task
@with_settings(warn_only=True)
def celery(state="", quiet=False):
    """Turn Celery on or off.

    Requires confirmation if maintenance mode is off.

    :param state: The state to transition to: "on" or "off".
    :type  state: ``str``
    :param quiet: If ``False`` a status message will be output.
    :type  quiet: ``boolean``
    """
    if state == "":
        print "Usage:\n"
        print "  fab celery:on"
        print "  fab celery:off"
        sys.exit()

    if state not in ("on", "off"):
        _abort("Invalid argument \"%s\": must be \"on\" or \"off\"." % state)

    if not env.upstart_jobs_prefix:
        _abort("env.upstart_jobs_prefix isn't set.")

    # Request confirmation if maintenance mode isn't on.
    if state == "off" and not _maintenance_mode_on():
        message = "Maintenance mode isn't on. Continue?"
        if not confirm(message, default=False):
            return

    if state == "on":
        # celeryd starts when celerycam's "started" event is emitted, but this
        # won't happen if the latter is already running; start both to be sure.
        sudo("start %scelerycam" % env.upstart_jobs_prefix)
        sudo("start %sceleryd" % env.upstart_jobs_prefix)
    else:
        # celeryd waits for all currently executing tasks to complete before it
        # terminates; stop it separately from celerycam so this function won't
        # return until celery really has stopped and no tasks are executing.
        sudo("stop %sceleryd" % env.upstart_jobs_prefix)
        sudo("stop %scelerycam" % env.upstart_jobs_prefix)

    if not quiet:
        print green("Celery %s." % state)


@task
def deploy():
    """Deploy to the server.

    The branch that is checked out in ``env.root_path``'s repository is
    deployed. Thus, the master branch must be checked out for a production
    deployment, the development branch for a development deployment, etc.

    Maintenance mode is turned on while deploying. It if was on before
    deployment began, it will remain so when it has finished.

    .. note::

        This task doesn't run database migrations or rebuild the Solr index.
    """
    _check_directories()

    # Is maintenance mode on? If not, turn it on.
    maintenance_was_on = _maintenance_mode_on()

    if not maintenance_was_on:
        print "> Turning maintenance mode on."
        maintenance("on", quiet=True)

    # Turn celery off. This function doesn't return until all currently
    # executing tasks have finishedâ€”this way, we can safely update task code.
    print "> Turning Celery off."
    celery("off", quiet=True)

    try:
        # Create a backup.
        with cd(env.root_path):
            run("cp -R repository repository_old")

        with cd(env.repository_path):
            # Fetch from origin, then hard reset the local branch to make it
            # match origin. The subcommand just gets the current branch's name.
            print "> Pulling the latest version."
            run("git fetch && git reset --hard origin/`%s`"
                % "git branch | grep '^\*' | cut -c 3-")

            with prefix("source environment/bin/activate"):
                # Install requirements. We're working in the original
                # repository so we've got the requirements cache!
                print "> Installing requirements."
                run("pip install -r requirements.txt "
                    "--download-cache=requirements_cache")

                # Collect static files.
                print "> Collecting static files."
                run("\"%s/manage.py\" collectstatic --noinput"
                    % env.root_module_name)

                # Compress static files.
                print "> Compressing static files."
                run("\"%s/manage.py\" compress" % env.root_module_name)

        with cd(env.root_path):
            with settings(warn_only=True):
                # Copy preserved files from the backup.
                print "> Copying preserved files."
                for path in env.preserved_files:
                    # Recursive so directories are copied.
                    result = run("cp -R \"{0}/{2}\" \"{1}/{2}\"".format(
                            "repository_old", "repository", path))

                    if result.failed:
                        print yellow("Couldn't preserve the file \"%s\"." % path)

        # Refresh the Solr core.
        if env.solr_core_name:
            print "> Refreshing Solr core."
            _refresh_solr_core()

        print "> Setting permissions."
        _set_permissions()

        # Remove the backup.
        with cd(env.root_path):
            run("rm -fr repository_old")
    except (Exception, SystemExit):
        # Something failed; restore the backup. Catching any old exception
        # isn't good practice, but we really don't want the site to go down.
        run("rm -fr repository && mv repository_old repository")

    # Turn Celery back on.
    print "> Turning Celery on."
    celery("on", quiet=True)

    # Restart memcached.
    print "> Restarting memcached."
    restart_memcached(quiet=True)

    # This reloads Apache for us; how convenient. If maintenance mode is
    # staying on, we don't need to reload it anyway!
    if not maintenance_was_on:
        print "> Turning maintenance mode off."
        maintenance("off", quiet=True)

    print green("Done!")


@task
def maintenance(state="", quiet=False):
    """Turn maintenance mode on or off.

    :param state: The state to transition to: "on" or "off".
    :type  state: ``str``
    :param quiet: If ``False`` a status message will be printed.
    :type  quiet: ``boolean``
    """
    if state == "":
        print "Usage:\n"
        print "  fab maintenance:on"
        print "  fab maintenance:off"
        sys.exit()

    if state not in ("on", "off"):
        _abort("Invalid argument \"%s\": must be \"on\" or \"off\"." % state)

    _check_directories()

    # Does the required Apache configuration file exist?
    extension = ".maintenance" if state == "on" else ""
    apache_file = "conf/apache/apache.conf" + extension
    apache_path = os.path.join(env.deployment_path, apache_file)

    if not exists(apache_path):
        message = "The Apache configuration file \"%s\" doesn't exist."
        _abort(message % apache_file)

    # Remove the copied maintenance directory (if it exists).
    with settings(warn_only=True):
        run("rm -r \"%s\"" % env.maintenance_copy_path)

    # Copy the Apache configuration files.
    for directory in ("available", "enabled"):
        sudo("cp \"%s\" \"/etc/apache2/sites-%s/%s\""
             % (apache_path, directory, env.site_name))

    # Copy the maintenance files if we're turning maintenance mode on; that
    # way, deploying a new version won't override the files being served!
    if state == "on":
        run("cp -R \"{0}\" \"{1}\"".format(
                env.maintenance_path, env.maintenance_copy_path))

    # Set permissions, reload Apache, and we're done!
    _set_permissions()
    sudo("/etc/init.d/apache2 reload")

    if not quiet:
        print green("Maintenance mode %s." % state)


@task
def rebuild_search_index():
    """Rebuild the search index (run ``manage.py rebuild_index``)."""
    with cd(env.repository_path):
        with prefix("source environment/bin/activate"):
            run("%s/manage.py rebuild_index --no-input" % env.root_module_name)


@task
def restart_memcached(quiet=False):
    """Restart memcached.

    If memcached wasn't running, it is started.

    :param quiet: If ``False``, a status message will be printed.
    :type  quiet: ``bool``
    """
    if not env.upstart_jobs_prefix:
        _abort("env.upstart_jobs_prefix isn't set.")

    with settings(warn_only=True):
        job_name = env.upstart_jobs_prefix + "memcached"
        result = sudo("restart " + job_name)

    # The above will fail if the job isn't already running, so here we start
    # it. This is outside the warn_only block because, if this fails, we abort.
    if result.failed:
        sudo("start " + job_name)

    if not quiet:
        print green("Restarted memcached.")


def _abort(message):
    """Outputs ``message`` to STDERR in red and raises ``SystemExit``.

    :param message: The message to be output to STDERR.
    :type  message: ``str``.
    """
    if output.aborts:
        print >> sys.stderr, red(message)

    sys.exit(1)


def _check_directories():
    """Check that the required directories exist; abort if not."""
    paths = (
        env.root_path,
        env.repository_path,
        env.deployment_path,
        env.maintenance_path,
    )

    for path in paths:
        if not exists(path):
            _abort("The directory \"%s\" doesn't exist." % path)


def _maintenance_mode_on():
    """Returns ``True`` if maintenance mode seems to be on, else ``False``."""
    return exists(os.path.join(env.root_path, "maintenance"))


def _refresh_solr_core():
    """Refreshes the site's Solr core.

    Copies the site's Solr configuration files into the core's ``conf``
    directory and reloads it using the core administration interface.

    .. note::

        Assumes that ``env.solr_core_name`` is not ``None``.

    .. warning::

        This function doesn't rebuild the index.
    """
    filenames = ("schema.xml", "solrconfig.xml")
    core_path = "/etc/opt/solr/%s/conf" % env.solr_core_name

    with cd(os.path.join(env.deployment_path, "conf/solr")):
        # Ensure that the files exist.
        for filename in filenames:
            if not exists(filename):
                message = "The Solr configuration file \"%s\" doesn't exist."
                _abort(message % filename)

        # Copy the files into the core's directory.
        for filename in filenames:
            sudo("cp {0} \"{1}/{0}\" && chown solr:solr \"{1}/{0}\"".format(
                    filename, core_path))

    # Reload the core.
    run("curl localhost:8983/solr/admin/cores?action=RELOAD&core=%s"
        % env.solr_core_name)


def _set_permissions():
    """Set permissions throughout the site directory.

    ..note ::

        Assumes that both the root and project directories exist.
    """
    # Use sudo as we may not be a member of www-data.
    sudo("chmod -R 750 \"{0}\" && chown -R {1}:www-data \"{0}\"".format(
            env.root_path, env.user))

    # Make the static directory writable for django-compressor.
    sudo("chmod -R 770 \"%s\"" % os.path.join(
            env.repository_path, env.root_module_name, "static"))


# Calculate the final host string and the site's name. We can't just use the
# root python module's name for the latter as there may be multiple instances.
env.hosts = [env.user + "@" + env.host]
env.site_name = os.path.basename(env.root_path)

# Calculate the paths to some frequently referenced directories.
env.repository_path = os.path.join(env.root_path, "repository")
env.deployment_path = os.path.join(env.repository_path, "deployment")
env.maintenance_path = os.path.join(env.deployment_path, "maintenance")
env.maintenance_copy_path = os.path.join(env.root_path, "maintenance")

# Shut up, Fabric.
ignore = ("running", "status", "stderr", "stdout", "warnings")
output.update(dict((level, False) for level in ignore))
